class Shape:
    def area(self):
        raise NotImplementedError("Subclasses must implement the area() method")

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

circle = Circle(5)
rectangle = Rectangle(4, 6)

print("Area of the circle:", circle.area())
print("Area of the rectangle:", rectangle.area())

# SECOND EXAMPLE
class BankAccount:
    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.__balance = balance  # Private attribute

    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount

    def withdraw(self, amount):
        if 0 < amount <= self.__balance:
            self.__balance -= amount

    def get_balance(self):
        return self.__balance

account = BankAccount("12345", 1000)
account.deposit(500)
account.withdraw(200)

print("Account Balance:", account.get_balance())
